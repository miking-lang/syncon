// === ../base ===

token Ident = "[[:lower:]][[:alnum:]_']*"
token UIdent = "[[:upper:]][[:alnum:]_']*"
token Integer = "[0-9]+"

type Exp
grouping "(" Exp ")"

type Stm
grouping "{" Stm "}"

type Pat
grouping "(" Pat ")"

type Type
grouping "(" Type ")"

type Decl


syncon decls: Top = decls:Decl+
syncon main: Decl =
  "main" "{" body:Stm "}"

infix right seqComp: Stm = ";"
syncon letStm: Stm = "let" p:Pat (":" t:Type)? "=" e:Exp
syncon return: Stm = "return" e:Exp?

syncon intLit: Exp = i:Integer
syncon var: Exp = i:Ident

syncon wildNamePat: Pat = i:Ident
syncon wildNoNamePat: Pat = "_"
syncon intPat: Pat = i:Integer

syncon namedType: Type = n:UIdent



// === inspired/adts ===

syncon adtDecl: Decl =
  "adt" n:UIdent "="
  ("|" c:UIdent arg:Ident*)+

syncon constructor: Exp = c:UIdent

// syncon constructorPat: Pat = c:UIdent
// infix left appPat: Pat = // intentionally left blank
// forbid funcDecl.args = appPat

syncon constructorPat: Pat = c:UIdent
prefix constructorAppPat: Pat = c:UIdent args:rec*
forbid constructorAppPat.args = constructorAppPat
forbid constructorAppPat.right = constructorAppPat

