// === ../base ===

token Ident = "[[:lower:]][[:alnum:]_']*"
token UIdent = "[[:upper:]][[:alnum:]_']*"
token Integer = "[0-9]+"

type Exp
grouping "(" Exp ")"

type Stm
grouping "{" Stm "}"

type Pat
grouping "(" Pat ")"

type Type
grouping "(" Type ")"

type Decl


syncon decls: Top = decls:Decl+
syncon main: Decl =
  "main" "{" body:Stm "}"

infix right seqComp: Stm = ";"
syncon letStm: Stm = "let" p:Pat (":" t:Type)? "=" e:Exp
syncon return: Stm = "return" e:Exp?

syncon intLit: Exp = i:Integer
syncon var: Exp = i:Ident

syncon wildNamePat: Pat = i:Ident
syncon wildNoNamePat: Pat = "_"
syncon intPat: Pat = i:Integer

syncon namedType: Type = n:UIdent



// === inspired/arithmetic ===

infix left plus: Exp = "+"
infix left minus: Exp = "-"
infix left times: Exp = "*"
infix left dividedBy: Exp = "/"
prefix arithNeg: Exp = "-"
prefix arithPrefixPlus: Exp = "+"

precedence {
  arithNeg arithPrefixPlus;
  times dividedBy;
  plus minus;
}

// TODO: do we want this in the fragment? Could follow standard praxis instead
infix modulus: Exp = "%"
precedence {
  arithNeg arithPrefixPlus;
  modulus;
}

