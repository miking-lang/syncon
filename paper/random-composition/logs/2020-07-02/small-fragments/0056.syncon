// === ../base ===

token Ident = "[[:lower:]][[:alnum:]_']*"
token UIdent = "[[:upper:]][[:alnum:]_']*"
token Integer = "[0-9]+"

type Exp
grouping "(" Exp ")"

type Stm
grouping "{" Stm "}"

type Pat
grouping "(" Pat ")"

type Type
grouping "(" Type ")"

type Decl


syncon decls: Top = decls:Decl+
syncon main: Decl =
  "main" "{" body:Stm "}"

infix right seqComp: Stm = ";"
syncon letStm: Stm = "let" p:Pat (":" t:Type)? "=" e:Exp
syncon return: Stm = "return" e:Exp?

syncon intLit: Exp = i:Integer
syncon var: Exp = i:Ident

syncon wildNamePat: Pat = i:Ident
syncon wildNoNamePat: Pat = "_"
syncon intPat: Pat = i:Integer

syncon namedType: Type = n:UIdent



// === inspired/structured_control ===

prefix if: Stm =
  "if" "(" c:Exp ")" (t:Stm "else")?

prefix while: Stm =
  "while" "(" c:Exp ")"

prefix for: Stm =
  "for" "(" init:Stm ";" c:Exp ";" step:Stm ")"

syncon break: Stm = "break"
syncon continue: Stm = "continue"

forbid if.t = if
forbid if.t = seqComp

precedence {
  if for while;
  seqComp;
}

