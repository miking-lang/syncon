// === ../base ===

token Ident = "[[:lower:]][[:alnum:]_']*"
token UIdent = "[[:upper:]][[:alnum:]_']*"
token Integer = "[0-9]+"

type Exp
grouping "(" Exp ")"

type Stm
grouping "{" Stm "}"

type Pat
grouping "(" Pat ")"

type Type
grouping "(" Type ")"

type Decl


syncon decls: Top = decls:Decl+
syncon main: Decl =
  "main" "{" body:Stm "}"

infix right seqComp: Stm = ";"
syncon letStm: Stm = "let" p:Pat (":" t:Type)? "=" e:Exp
syncon return: Stm = "return" e:Exp?

syncon intLit: Exp = i:Integer
syncon var: Exp = i:Ident

syncon wildNamePat: Pat = i:Ident
syncon wildNoNamePat: Pat = "_"
syncon intPat: Pat = i:Integer

syncon namedType: Type = n:UIdent



// === ocaml/record ===

syncon ocamlRecord: Exp =
  "{" f:Ident (":" ty:Type)? ("=" val:Exp)?
  (";" ft:Ident (":" tyt:Type)? ("=" valt:Exp)?)*
  ";"? "}"



// === ocaml/record_update ===

syncon ocamlRecordUpdate: Exp =
  "{" record:Exp "with"
  f1:Ident (":" ty1:Type)? ("=" v1:Exp)?
  (";" f2:Ident (":" ty2:Type)? ("=" v2:Exp)?)*
  ";"? "}"

