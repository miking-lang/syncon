The beginning of this file contains my notes on all the concerns raised by the reviewers. At the end, after "================", is the actual rebuttal.



# Review A (knowledgeable)

line 209: done
line 301: done, but check that the same isn't done elsewher, and that it's clear enough to read without different font or quoting
line 912: slightly simplified, if a language doesn't *need* forbids to be resolvably ambiguous, then we can definitely say resolvably ambiguous. If forbids are needed we cannot answer "resolvably ambiguous" with certainty. The "unresolvably ambiguous" answer is slightly less clear: we can answer this way with certainty if we only need to examine two trees, i.e., if \words(t_1) \subseteq \words(t_2).

Why is operator precedence often mentioned but not really part of any formal constraints, rather assumed as additional meta-level constraints?
- The intent was that forbids would be a strictly more general construct than precedence, whereby the formalities would use forbids, while users would most frequently interact with precedence, which is a more commonly understood thing. The need for deep precedence puts something of a damper on this however.

Why is Theorem 6.1 a theorem, isn't the proof trivial?
- It is indeed, but we figured it'd be better to be overly rigorous where it was easy to do so.

The classical example of if-then-else statement ambiguity is not mentioned in the paper, but it seems to fall into the same category, does it?
- It does indeed. We decided against it since the solution is widely known and accepted, though it does seem a bit dumb to not include right now...



# Review B (no familiarity)
Grammar/spelling issues addressed.
"Overall, nicely written paper and a very novel approach to a rather old problem. My issue is with regards to the practicality of this approach."



# Review C (expert)
- the results/algorithms cover a very limited class of grammars
- it is hard to see whether the general framework proposed in sec 4 is needed
  For this particular language formalism, no, but the general idea could be used for other formalisms with other forms of disambiguation, e.g., semicolons and the like.
- missing a comparison of alternative words and nested words
  TODO: consider this more carefully. You could consider a pair of parens as a nesting level in a nested word.
- the overall approach is not very convincing: It seems that the overall approach shifts the burden of thinking about ambiguity arising from language composition from the language designer to the user, which doesn't make sense to me.
  The idea is that the end-user already runs into these ambiguity issues, it's just that the compiler doesnt' care and picks a semi-arbitrary interpretation. The user's understanding of the grammar is likely ambiguous, though they might not realize it, but the compiler doesn't know this, leading the user to debug ambiguity errors through type errors or runtime errors. E.g. `1 & 3 == 1`, `match` in OCaml, if-then-else ambiguity.

line 70: done
line 94: I assume this means "set both operators at the same relative precedence, and arbitrarily pick left- or right-associativity" (since each operation is likely to be associative, in the mathematical sense, it shouldn't matter which associativity is chosen). The difference is that our approach makes the compiler highlight to the user that there are multiple distinct alternatives, all of which might be what the user intends.
line 144: 2/3 reviewers have now said we should discuss "dangling else", so we probably should. Maybe state that the two problems are essentially the same, but `match` is more likely to become an issue to the user simply by how the languages are used?
line 161: "would it make sense to just speak of derivation trees? The linear notion of derivation doesn't matter at all for this paper." It would indeed.
line 190,192: "why mix \varepsilon and \lambda?" We were following the definition in a particular book, but yes, this should probably just be \epsilon.
line 197: "AFAIK this restricted form is equivalent to the general form. Unless you restrict to deterministic systems, of course." We never use $a = \epsilon$, otherwise true.
line 222: agreed
line 268: added a sentence
line 271: the central required notion is the connection between words and trees, the latter is not present in the classical definition of a language (a set of words).
line 314: true, and done
line 351, 358: done
line 371: this likely means a slight reordering of things, basically a sentence or two, TODO
line 531: "version 3 apparently, nothing can be said about version 3. Version 1 (where soundness and completeness holds) seems a rather draconic and unrealistic restriction. But the authors do not comment on this pragmatic issue." This is essentially just straight up true. We should probably address this. Essentially: the static problem turns out to be harder to solve than one might think, and this is a first attempt at it.
line 551: the alternative word formulation additionally permits multiple nesting edges to share a position, e.g., ((1 + 2)) + 3 corresponds to 1 + 2 + 3 with two nesting levels around 1 + 2, which is not permitted by nesting words.
line 582: intuitively it seems trivial, but actually mechanically proving it is not, I believe (slight weakness here since we haven't actually done it). Quite happy / impressed that this is "obvious". Additional note: it's not just double parens, but also optional parens.
line 932: this could certainly use something at the end that just ties it together. I believe the reasoning has been presented earlier, and this is "just" filling in the blanks, but the conclusion should be present at the end. TODO: look more carefully at this
line 1001: The property is the possibility of constructing this set in finite time, i.e., that it's decidable.
line 1005: True, it should be "[...] the set of trees $t' \in L(T_D)$ such that $\words(t') \cap \bigcup_{i} \words(t_i) \neq \emptyset$ is finite". We should also mention that we use 7.3 to discover the full set of relevant trees, that's its purpose.

sec 8:
It would be good to discuss whether the results achieved in the case study are artifacts of the particular approach to defining the syntax.
- I interpret this to be a request to actually discuss the differences between the formalization version and the syncon version of the specification language, instead of just mentioning it and treating it as a (the) reasonable implementation of it.

--------------------------------

C sec 8:
It would be good to discuss whether the results achieved in the case study are artifacts of the particular approach to defining the syntax.
- I interpret this to be a request to actually discuss the differences between the formalization version and the syncon version of the specification language, instead of just mentioning it and treating it as a (the) reasonable implementation of it.


--------------------------------

Reviewer A
- can you be more precise when either case can be decided with certainty? (static)

Reviewer C explicit questions:
- what's the relation between alternative words and nested words?
- is there hope for any results for version 3 grammars?

Reviewer C
- very limited class of grammars
- the overall approach is not very convincing: It seems that the overall approach shifts the burden of thinking about ambiguity arising from language composition from the language designer to the user, which doesn't make sense to me.

Reviewer A + C
- if-then-else should be there and/or it's a more well-known version of the match example

---------------------------------




===================================================

We thank the reviewers for their thoughtful comments! We start by addressing major concerns and leave other comments for the end of the rebuttal.

**Reviewer C** comments that the overall approach shifts the burden of thinking about ambiguity from the language designer to the user. We argue that the user *already* has to deal with ambiguity issues in common general-purpose languages, but without compiler assistance. The programmer's understanding of syntax is likely (unknowingly) ambiguous, e.g., the match example in OCaml or combinations of infix operators (what is the result of  `1 & 3 == 1` in, e.g., C and Python?). Resolvable ambiguity allows the compiler to assist in such cases by using an ambiguous grammar.

However, enhancing the compiler does not absolve the language designer of the responsibility of making sure their language is convenient to use $-$ it merely provides an alternative way to deal with this sort of edge cases.

**Reviewers A and C** note the connection between nested matches and dangling else. We use the match example since, anecdotally, nested matches in OCaml occur more often than nested if-statements without braces and only a single `else`, and is thus more likely to become an issue. We will add a comparison to dangling else.

**Reviewer A** asks when the static analysis can give definitive answers. We can achieve a positive result (resolvably ambiguous) for a language that does not need forbids (precedence and associativity) to be resolvable. For example, OCaml does not fit here, since `[1; 2]` needs to forbid sequential composition as a direct child of a list to be resolvable, while arithmetic expressions do fit, since precedence and associativity are merely conveniences $-$ all possible expressions can disambiguated using parentheses.

The negative result is less intuitive, but arises when some tree can never be disambiguated from another particular tree, i.e., $\exists t_1, t_2.\ \forall w.\ t_1 \in \mathit{parse}(w) \Rightarrow t_2 \in \mathit{parse}(w)$.

**Reviewer C** notes that the class of grammars supported by the static analysis is quite limited, which is true (though slightly larger than is immediately obvious, see above). Our contribution is largely the concept, and the introduction of the resolvable ambiguity problem, which is more difficult than it initially appears. We do not yet know if the problem is decidable for version 3, and leave that for future research. We will add more discussion of these restrictions.

The dynamic analysis, however, is only limited to languages with balanced parentheses.

**Reviewer B** wonders about the practicality of this approach. As stated in the paper, we can parse 75% of the `.ml` files in the OCaml compiler (including test cases, i.e., many uncommonly used language features). We leave efficiency and similar concerns for future work.

**Reviewer C** asks for the relation between nested words and our alternative word representation. They are quite similar, but nested words disallow nesting edges that share a left or right point. This makes them unsuitable for our usecase, since that would disallow double parentheses and parentheses of the form `(a(b))`. We will add a comparison.

------------------------------------------------------------

#### Reviewer A

> Why is operator precedence often mentioned but not really part of any formal constraints, rather assumed as additional meta-level constraints?

The intent was that forbids would be a strictly more general construct than precedence, whereby the formalities would use forbids, while users would most frequently interact with precedence, seeing as it is a more generally understood concept. The need for deep precedence, as discussed in the evaluation, suggests a flaw in this however.

#### Reviewer C

> It is hard to see whether the general framework proposed in sec 4 is needed

For this particular language formalism, no, but the general idea can be used for other formalisms with other forms of disambiguation, e.g., optional semicolons and the like.

> line 94: A different approach would be to design the grammar so that the infix operators have associativity. That would force the user to put parentheses and avoid the problem. I don't quite see why this is more awkward than what the authors propose.

We assume this to mean "set both operators at the same relative precedence, and arbitrarily pick left- or right-associativity" (since each operation is likely to be associative, in the mathematical sense, it shouldn't matter which associativity is chosen). The difference is that our approach makes the compiler highlight to the user that there are multiple distinct alternatives, all of which might be what the user intends, instead of just picking one that the user might not expect.

> line 271: *parse languages* It seems to me that any decidable language can be a parse language, so there's not much point in defining that concept.

The central notion that we require is the connection between words and trees, the latter is not present in the classical definition of a language (a set of words).

> line 582 Can you explain why lemma 6.3 is nontrivial? it obviously corresponds to removing double parentheses.

It corresponds to removing both double and optional parentheses, leaving only those required by forbids, making it slightly less obvious.

> line 932 theorem 6.15. why is this a decidable property and how does it yield the proofs of soundness and completeness of version 1? what about version 2?

The property is decidable since the construction of $A_{()}$ and $A'_{()}$, and their trimmed product, is decidable. The procedure discovers unresolvable ambiguities where the lattice of one tree is entirely contained in the lattice of another tree. It is thus sound, since it always produces a concrete tree that has no unambiguous word. In version 1 there are no other forms of unresolvable ambiguities (Lemma 6.9, line 683-685), thus it is there complete. We will clarify the surrounding text to make these connections more clear.

> line 1001 lemma 7.2. the property that is to be proved seems to be missing.

The property is the possibility of constructing this set in finite time, i.e., that it is decidable.

> line 1005 lemma 7.3. the trees $t_1, \dots, t_n$ are not connected to the statement.

Indeed, it should be "[...] the set of trees $t' \in L(T_D)$ such that $\mathit{words}(t') \cap \bigcup_i \mathit{words}(t_i) \neq \emptyset$ is finite".

> sec 8:
> It would be good to discuss whether the results achieved in the case study are artifacts of the particular approach to defining the syntax.

Most results would be the same with some other more monolithic approach, assuming it supported ambiguity and a dynamic resolvability analysis, except of course for the compositional examples. The compositional examples are interesting since separately defined language fragments cannot be defined to compose unambiguously in general, thus we cannot simply forbid ambiguity.
